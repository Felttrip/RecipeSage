version: 2.1
orbs:
  aws-cli: circleci/aws-cli@1.0.0
jobs:
  test_backend:
    resource_class: large
    working_directory: ~/recipesage
    docker:
      - image: cimg/node:16.17
        environment:
          RS_TEST_DB_USERNAME: chefbook
          RS_TEST_DB_PASSWORD: admin
          RS_TEST_DB_DATABASE: chefbook_test
          NODE_ENV: test
          SENTRY_SAMPLE_RATE: 0
          POSTGRES_DB: chefbook_test
          POSTGRES_USER: chefbook
          POSTGRES_PASSWORD: admin
          POSTGRES_PORT: 5432
          POSTGRES_HOST: localhost
          POSTGRES_SSL: false
          POSTGRES_LOGGING: false
          GRIP_URL: http://localhost:5561/
          GRIP_KEY: changeme
      - image: postgres:9.6.9
        environment:
          POSTGRES_USER: chefbook
          POSTGRES_PASSWORD: admin
          POSTGRES_DB: chefbook_test
    steps:
      - checkout
      - run:
          name: update-npm
          command: 'sudo npm install -g npm@latest'
      - run:
          name: install-deps
          command: 'sudo npm install -g sequelize'
      # -------------- Setup SharedUtils -----------------
      - restore_cache:
          keys:
            - sharedutils-dependency-cache-v2-{{ checksum "SharedUtils/package-lock.json" }}
            - sharedutils-dependency-cache-v2-
      - run:
          name: install-npm-sharedutils
          command: 'cd SharedUtils && npm install'
      - save_cache:
          key: sharedutils-dependency-cache-v2-{{ checksum "SharedUtils/package-lock.json" }}
          paths:
            - ./SharedUtils/node_modules
      # -------------- Setup Backend -----------------
      - restore_cache:
          keys:
            - backend-dependency-cache-v2-{{ checksum "Backend/package-lock.json" }}
            - backend-dependency-cache-v2-
      - run:
          name: install-npm-backend
          command: 'cd Backend && npm install'
      - save_cache:
          key: backend-dependency-cache-v2-{{ checksum "Backend/package-lock.json" }}
          paths:
            - ./Backend/node_modules
      # -------------- Tests -----------------
      - run: # lint backend
          name: lint-backend
          command: cd Backend && npm run lint
      - run: # run backend tests
          name: test-backend
          command: cd Backend && npm run test:ci
  build_test_frontend:
    resource_class: large
    working_directory: ~/recipesage # directory where steps will run
    docker:
      - image: cimg/node:16.17
    steps:
      - checkout
      - run:
          name: update-npm
          command: 'sudo npm install -g npm@latest'
      # -------------- Setup SharedUtils -----------------
      - restore_cache:
          keys:
            - sharedutils-dependency-cache-v2-{{ checksum "SharedUtils/package-lock.json" }}
            - sharedutils-dependency-cache-v2-
      - run:
          name: install-npm-sharedutils
          command: 'cd SharedUtils && npm install'
      - save_cache:
          key: sharedutils-dependency-cache-v2-{{ checksum "SharedUtils/package-lock.json" }}
          paths:
            - ./SharedUtils/node_modules
      # -------------- Setup Frontend -----------------
      - restore_cache:
          keys:
            - frontend-dependency-cache-v2-{{ checksum "Frontend/package-lock.json" }}
            - frontend-dependency-cache-v2-
      - run:
          name: install-npm-frontend
          command: 'cd Frontend && npm install'
      - save_cache:
          key: frontend-dependency-cache-v2-{{ checksum "Frontend/package-lock.json" }}
          paths:
            - ./Frontend/node_modules
      # -------------- Tests -----------------
      - run: # lint frontend
          name: lint-frontend
          command: cd Frontend && npm run lint
      - run: # ngx-translate-lint frontend
          name: ngx-translate-lint-frontend
          command: cd Frontend && npm run ngx-translate-lint
      - run: # typecheck frontend
          name: typecheck-frontend
          command: cd Frontend && npx tsc --noemit
      - run: # build frontend
          name: build-frontend
          command: cd Frontend && npm run dist
      - persist_to_workspace:
          root: Frontend
          paths:
            - www
  push_backend:
    resource_class: large
    working_directory: ~/recipesage # directory where steps will run
    docker:
      - image: cimg/node:16.17
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.14
          docker_layer_caching: true
      - run:
          name: docker-login
          command: echo "$DOCKER_PAT" | docker login --username $DOCKER_USER --password-stdin
      - run:
          name: api-hosted.sh
          command: ./scripts/build/api-hosted.sh ${CIRCLE_TAG:=stg}
  push_backend_selfhost:
    working_directory: ~/recipesage # directory where steps will run
    docker:
      - image: cimg/node:16.17
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.14
          docker_layer_caching: true
      - run:
          name: docker-login
          command: echo "$DOCKER_PAT" | docker login --username $DOCKER_USER --password-stdin
      - run:
          name: api-selfhost.sh
          command: ./scripts/build/api-selfhost.sh ${CIRCLE_TAG:=stg}
  push_frontend:
    resource_class: large
    working_directory: ~/recipesage # directory where steps will run
    docker:
      - image: cimg/node:16.17
    steps:
      - checkout
      - aws-cli/setup
      - setup_remote_docker:
          version: 20.10.14
          docker_layer_caching: true
      - attach_workspace:
          at: .
      - run:
          name: set-frontend-version
          command: sed -i "s/window.version = 'development';/window.version = '${CIRCLE_TAG:=stg}';/" www/index.html
      - run:
          name: set-service-worker-version
          command: sed -i "s/APP_VERSION = 'development';/APP_VERSION = '${CIRCLE_TAG:=stg}';/" www/service-worker.js
      - run:
          name: webapp-hosted.sh
          command: ./scripts/build/webapp-hosted.sh ${CIRCLE_TAG:=stg}
  push_frontend_selfhost:
    working_directory: ~/recipesage # directory where steps will run
    docker:
      - image: cimg/node:16.17
    steps:
      - checkout
      - aws-cli/setup
      - setup_remote_docker:
          version: 20.10.14
          docker_layer_caching: true
      - run:
          name: docker-login
          command: echo "$DOCKER_PAT" | docker login --username $DOCKER_USER --password-stdin
      - run:
          name: webapp-selfhost.sh
          command: ./scripts/build/webapp-selfhost.sh ${CIRCLE_TAG:=stg}

workflows:
  version: 2
  build_and_test:
    jobs:
      - test_backend:
          filters:
            tags:
              only: /.*/
            branches:
              only: /.*/
      - build_test_frontend:
          filters:
            tags:
              only: /.*/
            branches:
              only: /.*/
      - push_backend:
          requires:
            - test_backend
          filters:
            tags:
              only: /^v[0-9]+(\.[0-9]+)*.*/
            branches:
              ignore: /.*/
      - push_backend_selfhost:
          requires:
            - test_backend
          filters:
            tags:
              only: /^v[0-9]+(\.[0-9]+)*.*/
            branches:
              ignore: /.*/
      - push_frontend:
          requires:
            - build_test_frontend
          filters:
            tags:
              only: /^v[0-9]+(\.[0-9]+)*.*/
            branches:
              ignore: /.*/
      - push_frontend_selfhost:
          requires:
            - build_test_frontend
          filters:
            tags:
              only: /^v[0-9]+(\.[0-9]+)*.*/
            branches:
              ignore: /.*/

